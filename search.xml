<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>条件异方差模型</title>
      <link href="/2018/11/17/archmodel/"/>
      <content type="html"><![CDATA[<blockquote><p>对于异方差序列的精确拟合,有方差齐性变化以及条件异方差模型两种方法.实践中,异方差函数的具体形式一般未知,因此在宏观经济领域和金融领域广泛采用条件异方差模型对异方差波动进行处理</p></blockquote><hr><h5 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h5><h5 id="1-集群效应"><a href="#1-集群效应" class="headerlink" title="1. 集群效应"></a>1. <strong>集群效应</strong></h5><p>对于提取完毕确定性信息之后,残差序列的波动,具有某些时段波动持续偏大的特征,如图示</p><p><img src="/assets/GARCH/0.png" alt="集群效应时序图"><br><a id="more"></a></p><ul><li><strong>说明:</strong> 集群效应,其本质是异方差现象.出现集群效应的时间序列,其方差基本齐性,但存在某段或某几段方差异与期望方差.因此基于齐性方差的分析方法无法确切拟合.通常,意味着需要引用 <em>条件方差模型</em></li></ul><hr><h5 id="2-ARCH-模型"><a href="#2-ARCH-模型" class="headerlink" title="2. ARCH 模型"></a>2. <strong>ARCH 模型</strong></h5><p> 全称,自回归条件方差模型(autoregressive conditional heteroskedastic),1982. <em>Engle</em> 提出</p><ol><li><p><strong>构造原理:</strong> 假设在历史数据已知的情况下,零均值、纯随机残差序列具有异方差性.<br>$$Var(ε_t)=h_t$$<br>在满足正态分布的假定下,异方差等价于残差平方的均值<br>$$E(ε^2_t)=h_t$$<br>ARCH模型可以提取残差平方序列的相关信息,以获得原序列异方差特征.</p></li><li><p><strong>模型意图:</strong> 在已知的ARIMA模型,残差自回归模型,以及确定性因素的分解模型拟合的是序列的平均水平,本质上只是一个点估计,无法给出估计的精度.或者说由于假定了方差齐性,其给出的区间估计是一个定值.对于存在异方差现象的序列无法精确的拟合.<br><code>图片</code><br>上述提到构建ARCH模型的意图是使用自回归提取误差平方序列的相关信息.它的条件方差是一个时变函数,更能及时的反映序列即期波动的特征,即异方差特征</p></li><li><p><strong>ARCH检验:</strong> 在拟合ARCH模型的开始,需要对序列进行ARCH检验.要求序列的异方差是由于某种自相关性造成的.常用的两种统计方法: <em>Portmanteau Q</em> 检验和 <em>LM检验</em></p></li></ol><ul><li><em>Portmanteau Q</em>检验:  构造思想是如果残差序列方差非齐,且具有集群效应,那么残差平方序列通常具有自相关性.所以方差非齐的检验可以转换为残差平方序列的自相关检验<br>假设条件:<br><img src="/assets/GARCH/1.png" alt=""></li></ul><p>当<code>Q(q)</code>统计量的P值小于显著水平<code>α</code>时,拒绝原假设,认为该序列方差非齐且具有自相关关系<br><em>LM检验</em>: 构造思想是如果残差序列方差非齐,且具有集群效应,那么残差序列具有自相关性.因此可以尝试对残差平方序列进行自回归模型的拟合(<code>ARCH(q)</code>模型)<br>$$ε^2_t=ω+\sumλ<em>jε^2</em>{t-j}+e_t$$<br>假设条件:<br><img src="/assets/GARCH/1.png" alt=""></p><p>于是方差齐性的检验转换成这个方差是否显著成立的检验,若方差显著,意味着残差平方序列具有自相关性,可以用该回归方差提取自相关信息.</p><h2 id="决策-P值小于显著水平α时-拒绝原假设-认为该序列方差非齐-并且可以使用q阶自回归拟合残差平方序列的自相关关系"><a href="#决策-P值小于显著水平α时-拒绝原假设-认为该序列方差非齐-并且可以使用q阶自回归拟合残差平方序列的自相关关系" class="headerlink" title="决策:P值小于显著水平α时,拒绝原假设,认为该序列方差非齐,并且可以使用q阶自回归拟合残差平方序列的自相关关系"></a>决策:P值小于显著水平<code>α</code>时,拒绝原假设,认为该序列方差非齐,并且可以使用q阶自回归拟合残差平方序列的自相关关系</h2><ol start="3"><li><strong>实例应用</strong><br><em>对1926-1991年标普500股票股价波动的模型拟合</em></li></ol><ul><li><p>导入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data a;</span><br><span class="line">input return@@;</span><br><span class="line">t=intnx(&apos;month&apos;,&apos;1oct1926&apos;d,_n_-1);</span><br><span class="line">format t monyy5.;</span><br><span class="line">cards;</span><br><span class="line">...  # 数据集较大</span><br><span class="line">...  # 省略号代替</span><br><span class="line">...</span><br><span class="line">;</span><br></pre></td></tr></table></figure></li><li><p>(可选)对原序列进行模型识别,尝试建立ARMA模型失败.由图,序列自相关系数落在两倍标准差之上,具有长期自相关的特征</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proc arima;</span><br><span class="line">identify var=return minic;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/assets/GARCH/3.png" alt="自相关图"></p><p>序列总体定阶 q=3</p><p><img src="/assets/GARCH/7.png" alt="最小信息准则"></p><ul><li>考虑建立残差自回归模型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proc autoreg;</span><br><span class="line"></span><br><span class="line"># 指令系统建立序列return的线性回归模型,</span><br><span class="line">#绘制残差序列的5阶自相关图,输出dw检验及P值,对残差序列进行异方差检验.</span><br><span class="line"># garch=(q=3) noint 通过对输出的分析后加的</span><br><span class="line">model return=t/nlag=5 dwprob archtest garch=(q=3) noint;</span><br><span class="line"></span><br><span class="line"># 输出到out数据集中</span><br><span class="line">output  out=out lcl=lcl ucl=ucl cev=cev;</span><br></pre></td></tr></table></figure></li></ul><p>DW检验显示与时间t不存在相关性</p><p><img src="/images/placeholder.png" alt="普通最小二乘估计输出结果" data-src="/assets/GARCH/4.png" class="lazyload"></p><p>残差序列5阶滞后自相关图不存在截尾特征</p><p><img src="/images/placeholder.png" alt="残差序列5阶滞后自相关图" data-src="/assets/GARCH/5.png" class="lazyload"></p><p>异方差检验,拒绝原假设,方差非齐</p><p><img src="/images/placeholder.png" alt="异方差检验结果" data-src="/assets/GARCH/6.png" class="lazyload"></p><p>结合自相关图和异方差检验,拟合ARCH(3)模型</p><p><img src="/images/placeholder.png" alt="最终模型参数检验" data-src="/assets/GARCH/8.png" class="lazyload"></p><ul><li>对建立的模型进行汇图<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data out;</span><br><span class="line">set out;</span><br><span class="line">Lcl_ARCH=-1.96*sqrt(cev);</span><br><span class="line">Ucl_ARCH=1.96*sqrt(cev);</span><br><span class="line">proc gplot data=out;</span><br><span class="line">plot return*t=2 lcl*t=3 LCL_arch*t=4 ucl*t=3 UCL_arch*t=4 /overlay;</span><br><span class="line">symbol2 c=green i=needle v=none ;</span><br><span class="line">symbol3 c=black i=join v=none w=2 l=2;</span><br><span class="line">symbol4 c=red i=join v=none ;</span><br><span class="line">run;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/placeholder.png" alt="拟合图" data-src="/assets/GARCH/9.png" class="lazyload"></p>]]></content>
      
      
        <tags>
            
            <tag> SAS </tag>
            
            <tag> 时间序列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Senye</title>
      <link href="/2018/06/20/HelloSenye/"/>
      <content type="html"><![CDATA[<p></p><p></p><h3 id="Senye"><a href="#Senye" class="headerlink" title="Senye"></a>Senye</h3><p>本站点<a href="https://snye.ink/" target="_blank" rel="noopener">Senye</a>由<code>hexo+githubpages+阿里云域名解析</code>构建的！这篇文章记录一下大致的思路，其实很简单，网上的教程也有不少。<br></p><p></p><p><img src="/assets/hs.jpg" alt="blog"></p><a id="more"></a><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个开源的静态博客生成器,用node.js开发，支持<code>Markdown</code>格式，有众多优秀插件和主题，Hexo可以将在本地写好的<code>.md</code>文件调用命令来批量完成相关静态页面的创建，然后再将有改动的页面提交到<code>github</code>实现文章发布</p><h4 id="githubpages"><a href="#githubpages" class="headerlink" title="githubpages"></a>githubpages</h4><p><a href="https://github.com/" target="_blank" rel="noopener">github</a>有一个很有爱的项目，叫做<a href="https://pages.github.com/" target="_blank" rel="noopener">github pages</a>，这个项目是给开发者建立一个私人网站页面，上面用来分享新颖的想法和自己写的代码，githubpages只能存放的都是静态文件，虽然有局限，但是用来作为个人博客再合适不过了</p><h4 id="阿里云域名解析"><a href="#阿里云域名解析" class="headerlink" title="阿里云域名解析"></a>阿里云域名解析</h4><p><a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云域名解析</a>，当然，你不绑定域名肯定也是可以的，通过<code>https://xxx.github.io</code>访问。但是为了突出，对吧，有必要安排一下的</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在<a href="https://github.com/" target="_blank" rel="noopener">github</a>上注册账号，创建一个仓库，名称为<code>账户名.github.io</code>,参考:<a href="https://jingyan.baidu.com/article/acf728fd64b5a2f8e510a31d.html" target="_blank" rel="noopener">创建githubpages</a></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用git同步到github上,<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">此处安装</a>，假设到你是<code>Windows10</code>系统，安装完成后，右击鼠标进入到<code>git</code>命令行</p><h3 id="配置ssh秘钥"><a href="#配置ssh秘钥" class="headerlink" title="配置ssh秘钥"></a>配置ssh秘钥</h3><p>关于配置和ssh秘钥，参考这篇博文<a href="https://www.cnblogs.com/flora5/p/7152556.html" target="_blank" rel="noopener">duxinmiao</a></p><h2 id="使用hexo主题"><a href="#使用hexo主题" class="headerlink" title="使用hexo主题"></a>使用hexo主题</h2><h3 id="运行环境配置"><a href="#运行环境配置" class="headerlink" title="运行环境配置"></a>运行环境配置</h3><p>在githubpages上部署hexo主题，需要现在本地配置好<code>node.js</code>环境，<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js下载地址</a>。需要注意的是，安装node.js会包含环境变量及<code>npm</code>的安装。在命令行输入<code>node -v、npm -v</code>检测是否安装成功</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>命令行<code>npm install -g hexo-cli</code></p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>hexo静态网站有一定的目录结构，在hexo的<a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">官方文档</a>中详细的介绍，同时作为一个优秀的开源项目，热爱这个项目的创造者们早已经分享了太多的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">优秀模板</a>，通过修改<code>_config.yml</code>来定制自己的个人博客，参考<a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">hexo官方文档</a>和<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">有关博客</a></p><h2 id="阿里云域名部署"><a href="#阿里云域名部署" class="headerlink" title="阿里云域名部署"></a>阿里云域名部署</h2><p>在阿里云买好域名并实名认证之后，就可以给自己的博客站点更名了</p><h3 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h3><p>在本地的hexo文件夹根目录下的<code>source</code>文件下新建<code>CNAEM</code>文件，并添加自己申请的域名信息，然后部署到<code>github</code>上去</p><h3 id="配置settings"><a href="#配置settings" class="headerlink" title="配置settings"></a>配置settings</h3><p>在网站项目的<code>Settings</code>中，添加自己的域名到<code>Custom domin</code></p><h3 id="添加域名解析记录"><a href="#添加域名解析记录" class="headerlink" title="添加域名解析记录"></a>添加域名解析记录</h3><h4 id="1-ping-yourname-github-io获取ip地址"><a href="#1-ping-yourname-github-io获取ip地址" class="headerlink" title="1. ping yourname.github.io获取ip地址"></a>1. ping yourname.github.io获取ip地址</h4><h4 id="2-打开阿里的域名管理，在解析列表中添加两条解析记录"><a href="#2-打开阿里的域名管理，在解析列表中添加两条解析记录" class="headerlink" title="2. 打开阿里的域名管理，在解析列表中添加两条解析记录"></a>2. 打开阿里的域名管理，在解析列表中添加两条解析记录</h4><table><thead><tr><th style="text-align:center">记录类型</th><th style="text-align:center">主机记录</th><th style="text-align:center">记录值</th></tr></thead><tbody><tr><td style="text-align:center">CNAME</td><td style="text-align:center">www</td><td style="text-align:center">yourname.github.io</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">@</td><td style="text-align:center">ip地址</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> theme </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
